- owner = user? && user? == @user
- path  = params[:path]

input#effective-lang.hide
.row
  .span10
    pre#shell-output_container
      pre#shell-output
      input#shell-prompt type="text" placeholder="  Terminal emulator. Run commands like ruby, gem, node, npm, python, pip etc. To run some code, put it in a file."
    
    - if user?
      span.muted
        | &nbsp;
        i.icon-user
        | &nbsp;Logged in as&nbsp;
        strong = user?
    - unless owner
      span.muted
        |. &nbsp;Viewing 
        strong #{@user}
        |'s account


    .pull-right
      span.muted
        | Tired to work in browser?
      a href="https://github.com/slivu/cibox"  Try Console Client&nbsp;&nbsp;
      a.badge.badge-info#help-button
        .icon-question-sign
        | Help
      
      a#shell-prompt-close_button.btn.btn-small onClick="cibox.reset_shell_output();"
        i.icon-remove#shell-prompt-close_button-icon

.tabbable.tabs-below
  .tab-content
    - @langs.each do |lang, versions|
      .tab-pane#verselector-tab-bash
          
      - if versions.size == 0
        .tab-pane id="verselector-tab-#{lang}" Coming Soon
      - else
        .tab-pane id="verselector-tab-#{lang}"
          .verselector-container
            select.verselector id="verselector-#{lang}" multiple=true
              option value='' id="verselector-#{lang}-all" All

              - versions.each_pair do |v, is_default|
                option value=v selected=is_default = v

  ul.nav.nav-tabs#menu-tab
    li.active
      
      a href="#verselector-tab-bash" data-toggle="tab" onClick="cibox.switch_lang(''); cibox.update_location.remove(['versions']); $('#shell-prompt').focus();" $

    - @langs.each_key do |lang|
      li
        a href="#verselector-tab-#{lang}" data-toggle="tab" onClick="cibox.switch_lang('#{lang}', cibox.effective_file_ext()); cibox.update_location.extend({versions: cibox.effective_lang_versions(true)}); $('#shell-prompt').focus();" lang=lang
          img src=("/icons/%s.png" % lang)

    li.dropdown
      a.dropdown-toggle data-toggle="dropdown" href="#"
        i.icon-list
        | &nbsp;Repositories &nbsp;
        b.caret
      ul.dropdown-menu#repos role="menu"
    li.dropdown
      a.dropdown-toggle data-toggle="dropdown" href="#"
        i.icon-list
        | &nbsp;Procedures &nbsp;
        b.caret
      ul.dropdown-menu#procedures role="menu"
    - if owner
      li.dropdown
        a.dropdown-toggle data-toggle="dropdown" href="#"
          i.icon-lock
          | &nbsp;SSH Keys
          b.caret
        ul.dropdown-menu
          li
            a href="#" onClick="ssh_key_crudifier.create({user: '#{@user}', repo: '#{@repo}', path: '#{path}'});"
              i.icon-circle-arrow-down
              | &nbsp;authorized_keys
          li
            a href="#" onClick="$('#ssh_pub_key-modal').modal();"
              i.icon-circle-arrow-up
              | &nbsp;id_rsa.pub
      li.dropdown
        a href=User.route(:logout)
          i.icon-off
          | &nbsp;Logout
    - else
      - if user?
        li.dropdown
          a href=Index.route(user?)
            i.icon-user
            | &nbsp;My Account
      - else
        li.dropdown
          a href=User.route(:auth__github)
            i.icon-user
            | &nbsp;Login with GitHub

    li.dropdown.pull-right style="width: 20%;"
      #progress_bar.progress.progress-striped.active.hide style="margin-top: 5px; margin-bottom: 0;"
        .bar style="width: 100%; "

#ssh_pub_key-modal.modal.hide
  .modal-body
    p
      | Add this key to your GitHub account
      br/
      | to be able to push stuff from your CIBox account
    input.span5 type='text' value=@ssh_pub_key onClick="$(this).focus().select();"
  .modal-footer
    button.btn data-dismiss="modal" aria-hidden="true" Close

#file_reader.hide
  .row
    .span
      .btn-group
        - if owner
          button.btn.btn-small.file_reader-button onClick="cibox.save_file('#{{ Repo::File.route :save }}');"
            i.icon-file
            | &nbsp;Save
          button.btn.btn-small.file_reader-run.file_reader-button onClick="cibox.save_file('#{{ Repo::File.route :save }}', 'run');"
            i.icon-forward
            | &nbsp;Save and Run
        button.hide.btn.btn-small.file_reader-compile.file_reader-button onClick="cibox.save_file('#{{ Repo::File.route :save }}', 'compile');"
          i.icon-cog
          | &nbsp;Compile
        button.btn.btn-small.file_reader-run.file_reader-button onClick="cibox.invoke_file_runner();"
          i.icon-play
          | &nbsp;Run

    .span
      strong#file_reader-name
    .span.pull-right
      a.btn.btn-small#file_reader-close_button onClick="$('#file_reader').hide(); cibox.update_location.remove(['file', 'run']);"
        i.icon-remove#file_reader-close_button-icon
  #file_reader-content

- unless @repo
  h4
    | First things first
  h5.well
    | Click <b>Repositories</b> on menu above to create a brand new repo where you'll can create and run your files.
  h5.well
    | If you do not want to create files manually, you can clone a GitHub repository.
    br/
    | Just type <code>git clone git://your.repo</code> in the terminal above.
  h5.well
    | Or use
    a href="https://github.com/slivu/cibox"  Console Client&nbsp;
    | if you prefer to work in terminal.
    
hr/
#repo_fs
  #repo_fs-fm
  
script
  | $(function () {
      cibox = new CIBox('#{ @user }', '#{ @repo }', '#{{ path }}');
      cibox.url_map.run_file = '#{{ Repo::File.route :invoke }}';
      
      var output = new EventSource('#{{ Index.route :subscribe }}/' + window.name);
      
      output.addEventListener('crud_stream', function(e) {
        if (e.origin != '#{base_url}'){
          alert('Origin Mismatch');
          return false;
        }

        try {
          var data = JSON.parse(e.data);
          
          switch (data.resource) {

          case 'repo':
            cibox.update_repo_list('#{{ Repo.route :dropdown }}');
            repos_crudifier.hide();
            if (data.action == 'update' || data.action == 'create') {
              window.location.href = '#{{ Index.route @user }}/' + data.params['name'];
            } else if (data.action == 'delete') {
              if (data.params['name'] == '#{ @repo }')
                window.location.href = '#{{ Index.route @user }}';
              if ('#{@repo}'.length == 0)
                cibox.update_repo_fs('#{{ Repo.route :fs }}');
            }
            break;

          case 'file':
            var queryString = getQueryString();
            var file = queryString['file']||'';

            if (data.action == 'delete') {
              if ( file == data.params['name'] ) {
                cibox.update_location.remove(['file', 'run']);
                $('#file_reader').hide();
              }
            } else {
              if (file.length == 0 || (file.length > 0 && file == data.params['file'])) {
                cibox.invoke_file_reader('#{{ Repo::File.route :read }}', data.params['name']);
              }
            }
            cibox.update_repo_fs('#{{ Repo.route :fs }}');
            repo_fs_crud_file.hide();
          
            break;
          case 'folder':
            cibox.update_repo_fs('#{{ Repo.route :fs }}');
            repo_fs_crud_folder.hide();
            break;
          case 'ssh_key':
            switch (data.action) {
            case 'add':
              cibox.alert('Successfully added new SSH key');
              break;
            case 'remove':
              cibox.alert('SSH key successfully removed');
              break;
            }
            ssh_key_crudifier.hide();
            break;
          }
          
        } catch (exc) {
          cibox.error('unable to parse given JSON');
        }
      }, false);

      output.addEventListener('rpc_stream', function(e) {
        if (e.origin != '#{base_url}'){
          alert('Origin Mismatch');
          return false;
        }

        try {
          var data = JSON.parse(e.data);
          
          switch (data.procedure) {
            case 'progress_bar':
              data.call == 'show' ?
                cibox.show_progress_bar():
                cibox.hide_progress_bar();
              break;
            case 'update_repo_list':
              cibox.update_repo_list('#{{ Repo.route :dropdown }}');
              break;
            case 'update_repo_fs':
              cibox.update_repo_fs('#{{ Repo.route :fs }}');
              break;
            case 'download':
              $('#download').prop('src', data.call);
              break;
            case 'redirect':
              window.location.href = data.call;
              break;
            case 'alert':
              cibox.alert( cibox.sanitize_output(data.call) );
              break;
            case 'error':
              cibox.error( cibox.sanitize_output(data.call) );
              break;
          }

        } catch (exc) {
          cibox.error('unable to parse given JSON');
        } 
      }, false);

      output.addEventListener('shell_stream', function(e) {
        if (e.origin != '#{base_url}'){
          alert('Origin Mismatch');
          return false;
        }
        var data = decodeURIComponent(e.data).replace(/\n/, "<br/>");
        $('#shell-output').append(data);
        cibox.scroll_shell();
      }, false);

      var queryString = getQueryString();
      if ( queryString['file'] ) {
        cibox.invoke_file_reader('#{{ Repo::File.route :read }}', queryString['file'], false);
      }
      
      ssh_key_crudifier = new ECrudifyBootstrap('#{{ User.route :ssh_key }}');
      ssh_key_crudifier.html('ssh_key_crudifier');

      repos_crudifier = new ECrudifyBootstrap('#{{ Repo::CRUD.route }}');
      repos_crudifier.html('repos_crudifier');

      procedures_crudifier = new ECrudifyBootstrap('#{{ Procedure::CRUD.route }}', function(){
        cibox.update_procedures_list('#{{ Procedure.route :dropdown }}');
        procedures_crudifier.hide();
        cibox.alert('Done');
      });
      procedures_crudifier.html('procedures_crudifier');

      repo_fs_crud_folder=new ECrudifyBootstrap('#{{Repo::Folder::CRUD.route}}');
      repo_fs_crud_folder.html('repo_fs_crud_folder');

      repo_fs_crud_file=new ECrudifyBootstrap('#{{Repo::File::CRUD.route}}');
      repo_fs_crud_file.html('repo_fs_crud_file');

      $('#shell-prompt').focus().keypress( function (e) {
        if(e.which == 13)
          cibox.invoke_shell('#{Shell.route :invoke}');
      });

      $('a[data-toggle="tab"]').on('shown', function (e) {
         var effectiveLang = $(e.target).prop('lang');
         localStorage['effectiveLang'] = effectiveLang;
         cibox.update_location.extend({lang: effectiveLang});
      });

      var effectiveLang = queryString['lang'] || localStorage['effectiveLang'];
      
      if (effectiveLang)
        cibox.switch_lang(effectiveLang);
      else
        effectiveLang = cibox.effective_lang();

      if (effectiveLang) {
        var opted_versions = ( _ = queryString['versions']||'' ).length > 0 ? _.split('+') : [];
        if (opted_versions.length > 0) {
          var target_selector = '#verselector-' + effectiveLang;
          $( target_selector + ' option:selected' ).removeAttr('selected');
          $( target_selector + ' > option' ).each( function() {
            $(this).attr('selected', jQuery.inArray($(this).attr('value'), opted_versions) >= 0);
          });
        }
      }
      verselector_options = { closeOnSelect: false, placeholder: "All versions selected" }
      $('.verselector').select2( verselector_options ).click(function(e) {
          var selected = $(e.target).val() || [];
          var target_selector = '#' + $(e.target).attr('id');
          if(jQuery.inArray('', selected) >= 0){
            $( target_selector + ' option:selected' ).removeAttr('selected');
            $( target_selector ).select2( verselector_options );
            selected = [];
          }
          cibox.update_location.extend({versions: selected.length > 0 ? selected.join('+') : '*' });
          $('#shell-prompt').focus();
      });
    
      // both triggers should go only after versions was set

      if ( queryString['run'] )
        cibox.invoke_file_runner(queryString['file']);

      if ( queryString['procedure_id'] )
        cibox.invoke_procedure('#{{Procedure.route :invoke}}', queryString['procedure_id'], false);

      cibox.update_procedures_list('#{{ Procedure.route :dropdown }}');
      cibox.update_repo_list('#{{ Repo.route :dropdown }}');
      cibox.update_repo_fs('#{{ Repo.route :fs }}');

    });


iframe#download.hide src='about:blank'
script src='/vendor/ace-builds/src-min-noconflict/ace.js'
